#include <WiFi.h>
#include <PubSubClient.h>

// Replace with your network credentials
const char* ssid = "wifi_ssid";
const char* password = "wifi_pass";

// Replace with your CloudMQTT server details
const char* mqttServer = "driver.cloudmqtt.com";
const int mqttPort = 18889;
const char* mqttUsername = "mqtt_user";
const char* mqttPassword = "mqtt_password";

// Set the MQTT topics and client ID
const char* topic = "automation";
const char* clientID = "arduino-client";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;

#define LED_PIN 23 // Replace with the appropriate pin number for your ESP32 board


void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Connect to MQTT broker
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
    if (client.connect(clientID, mqttUsername, mqttPassword)) {
      Serial.println("Connected to MQTT");
      client.subscribe(topic);
    } else {
      Serial.print("MQTT connection failed, rc=");
      Serial.print(client.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void loop() {
  client.loop();
}


void callback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  
   if (message == "lock") {
    lockMethod();
  } else if (message == "unlock") {
    unlockMethod();
  }

}

void lockMethod() {
  // Code for lock functionality
  Serial.println("Locking...");
  
  // Turn on the LED
  digitalWrite(LED_PIN, HIGH);
}

void unlockMethod() {
  // Code for unlock functionality
  Serial.println("Unlocking...");
  
  // Turn off the LED
  digitalWrite(LED_PIN, LOW);
}
